openapi: 3.0.3
info:
  title: Foody Order RESTful API - OpenAPI 3.0
  description: This is a simple food ordering app API.
  contact:
    email: sabilillah272@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
security:
  - bearerAuth: []
tags:
  - name: users
    description: Operation about user
  - name: products
    description: Everything about product
  - name: carts
    description: Operation about cart
  - name: reviews
    description: Operation about review
  - name: tags
    description: Everything about tag
  - name: categories
    description: Everything about category
paths:
  /api/users:
    post:
      tags:
        - users
      summary: Register new user
      security: []
      requestBody:
        description: Data of new user
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - "username"
                - "name"
                - "password"
                - "phonenumberForm"
              properties:
                username:
                  type: string
                  example: zylcom
                  minLength: 1
                name:
                  type: string
                  example: Zylcom
                  minLength: 1
                password:
                  type: string
                  format: password
                  example: rahasia123
                  minLength: 8
                phonenumberForm:
                  type: object
                  additionalProperties: false
                  required:
                    - "number"
                    - "countryCode"
                  properties:
                    number:
                      type: string
                      example: "+6281234567890"
                      minLength: 10
                      maxLength: 25
                    countryCode:
                      type: string
                      example: ID
                      minLength: 1
                      maxLength: 2
                      description: Your country code in format ISO 3166-1 alpha-2. Default is ID
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - properties:
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Inp5bGNvbSIsImlhdCI6MTcwMTE2MTMwMiwiZXhwIjoxNzAxMTYzMTAyfQ.ayb_eVeGyv2v5-H_zw0_myMOrafwMDtFsreYy9jD1HY"
                          cart:
                            $ref: "#/components/schemas/Cart"
        "400":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: "Your password must be at least 8 characters."
        "409":
          description: Username already used
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: "Another user with this username already exist."
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/current:
    get:
      tags:
        - users
      summary: Get data of authenticated user
      responses:
        "200":
          description: Data of authenticated user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/User"
                  - properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - users
      summary: Update current user data
      security:
        - bearerAuth: []
      requestBody:
        description: New data
        content:
          application/json:
            schema:
              type: object
              required:
                - "name"
                - "phonenumberForm"
              properties:
                name:
                  type: string
                  example: Zylcom
                  minLength: 1
                address:
                  type: string
                  example: Address
                  minLength: 1
                phonenumberForm:
                  type: object
                  additionalProperties: false
                  required:
                    - "number"
                    - "countryCode"
                  properties:
                    number:
                      type: string
                      example: "+6281234567890"
                      minLength: 10
                      maxLength: 25
                    countryCode:
                      type: string
                      example: ID
                      minLength: 1
                      maxLength: 2
                      description: Your country code in format ISO 3166-1 alpha-2. Default is ID
      responses:
        "200":
          description: Update user successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/guest:
    get:
      tags:
        - "users"
      summary: Create guest user id
      security: []
      responses:
        "201":
          description: Created guest user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      guestUserId:
                        type: string
                        example: 6429c8d9-2dee-4677-9364-9aca60a303d0
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/login:
    post:
      tags:
        - users
      summary: Login user
      security: []
      requestBody:
        description: User credential
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - "username"
                - "password"
              properties:
                username:
                  type: string
                  example: zylcom
                  minLength: 1
                password:
                  type: string
                  example: rahasia123
                  minLength: 1
      responses:
        "200":
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Inp5bGNvbSIsImlhdCI6MTcwMTE3MTM1MiwiZXhwIjoxNzAxMTczMTUyfQ.jIUKECwZ28W-aDnY786WYzAHGpDRsrtPBuNXvGWUYw8
        "400":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: Username is required.
        "401":
          description: Login fail
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Username or password invalid!
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/products:
    get:
      tags:
        - products
      summary: Get collections of products
      parameters:
        - name: name
          allowEmptyValue: true
          description: Name of product.
          in: query
          required: false
          schema:
            type: string
            pattern: ^[a-zA-Z0-9]
            maxLength: 25
        - name: tag
          allowEmptyValue: true
          description: Tag of product.
          in: query
          required: false
          schema:
            type: string
            pattern: ^[a-zA-Z0-9]
            maxLength: 25
        - name: category
          allowEmptyValue: true
          description: Category of product.
          in: query
          required: false
          schema:
            type: string
            pattern: ^[a-zA-Z0-9]
            maxLength: 25
        - name: size
          allowEmptyValue: false
          description: Length of data taken (default 10)
          in: query
          required: false
          schema:
            type: integer
            example: 5
            minimum: 1
            format: int32
            maximum: 100
        - name: cursor
          allowEmptyValue: false
          description: Cursor is product id.
          in: query
          required: false
          schema:
            type: integer
            example: 1
            minimum: 1
            format: int32
      security: []
      responses:
        "200":
          description: Get collections of products successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Product"
                        - type: object
                          properties:
                            likes:
                              $ref: "#/components/schemas/Like"
                  paging:
                    $ref: "#/components/schemas/Paging"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/products/search:
    get:
      tags:
        - products
      summary: Search products
      security: []
      parameters:
        - name: name
          allowEmptyValue: true
          description: Name of product.
          in: query
          required: false
          schema:
            type: string
            example: Egg
            pattern: ^[a-zA-Z0-9]
            maxLength: 50
        - name: tag
          allowEmptyValue: true
          description: Tag of product.
          in: query
          required: false
          schema:
            type: string
            example: egg
            pattern: ^[a-zA-Z0-9]
            maxLength: 50
        - name: category
          allowEmptyValue: true
          description: Category of product.
          in: query
          required: false
          schema:
            type: string
            example: food
            pattern: ^[a-zA-Z0-9]
            maxLength: 50
        - name: size
          allowEmptyValue: false
          description: Length of data taken.
          in: query
          required: false
          schema:
            type: integer
            example: 5
            minimum: 1
            format: int32
            maximum: 100
        - name: page
          allowEmptyValue: false
          description: Page of data.
          in: query
          required: false
          schema:
            type: integer
            example: 1
            minimum: 1
            format: int32
        - name: all
          allowEmptyValue: false
          description: Get all off data. If use this, size query will be ignored.
          in: query
          required: false
          schema:
            type: boolean
            example: false
      responses:
        "200":
          description: Search product successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Product"
                        - type: object
                          properties:
                            likes:
                              $ref: "#/components/schemas/Like"
                  paging:
                    $ref: "#/components/schemas/Paging"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/products/best-rated:
    get:
      tags:
        - "products"
      summary: Get collections of best rating products
      security: []
      parameters:
        - name: category
          in: query
          required: false
          allowEmptyValue: true
          description: Category slug
          schema:
            type: string
            example: food
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
            maxLength: 50
      responses:
        "200":
          description: Get collections successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Product"
                        - properties:
                            likes:
                              type: array
                              items:
                                $ref: "#/components/schemas/Like"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/products/{slug}:
    get:
      tags:
        - "products"
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            example: baked-fish
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
            minLength: 1
            maxLength: 50
      summary: Get product detail by product slug
      security: []
      responses:
        "200":
          description: Get product successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Product"
                      - properties:
                          reviews:
                            type: array
                            items:
                              type: object
                              allOf:
                                - $ref: "#/components/schemas/Review"
                                - properties:
                                    user:
                                      $ref: "#/components/schemas/User"
                          likes:
                            type: array
                            items:
                              $ref: "#/components/schemas/Like"
                          tags:
                            type: array
                            items:
                              $ref: "#/components/schemas/Tag"
        "404":
          $ref: "#/components/responses/ProductNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/products/{productSlug}/like:
    post:
      tags:
        - products
      summary: Like specific product
      security:
        - bearerAuth: []
      parameters:
        - name: productSlug
          in: path
          description: The product slug
          required: true
          schema:
            type: string
            example: pizza
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
            minLength: 1
            maxLength: 50
      responses:
        "200":
          description: Like product successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Like"
        "409":
          description: User already liked this product
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Product is already liked!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ProductNotFound"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - products
      summary: Neutralize like specific product
      security:
        - bearerAuth: []
      parameters:
        - name: productSlug
          in: path
          description: The product slug
          required: true
          schema:
            type: string
            example: pizza
            maxLength: 50
            minLength: 1
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      responses:
        "200":
          description: Neutralize like product successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Like"
        "400":
          description: User not liked this product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: Product is not liked!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ProductNotFound"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/carts:
    get:
      tags:
        - carts
      summary: Get cart data
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get cart data successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Cart"
                      - type: object
                        properties:
                          cartItems:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/carts/items:
    get:
      tags:
        - carts
      summary: Get cart items
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get cart items successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - carts
      summary: Update or insert item to cart
      security:
        - bearerAuth: []
      requestBody:
        description: Item information
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  format: int32
                  example: 15
                  minimum: 1
                  maximum: 999
                productSlug:
                  type: string
                  example: pizza
                  maxLength: 50
                  minLength: 3
      responses:
        "200":
          description: Update or insert item successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Item"
                      - type: object
                        properties:
                          product:
                            $ref: "#/components/schemas/Product"
        "400":
          description: Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: >-
                      Number must be greater than or equal to 1, Quantity must
                      be positive number!
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ProductNotFound"
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/carts/items/{productSlug}:
    get:
      tags:
        - carts
      security:
        - bearerAuth: []
      summary: Get cart item by product slug
      parameters:
        - required: true
          name: productSlug
          in: path
          description: Product slug
          schema:
            type: string
            example: pizza
            maxLength: 50
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      responses:
        "200":
          description: Get item successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Product item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Item not found!
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - carts
      security:
        - bearerAuth: []
      summary: Remove item from cart
      parameters:
        - required: true
          name: productSlug
          in: path
          description: Product slug
          schema:
            type: string
            maxLength: 50
            example: pizza
      responses:
        "200":
          description: Delete item successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: Cart item deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Product item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Cart item not found!
        "422":
          $ref: "#/components/responses/TokenError"
  /api/products/reviews:
    post:
      tags:
        - reviews
      security:
        - bearerAuth: []
      summary: Create new review
      requestBody:
        description: Review data
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "rating"
                - "productSlug"
              properties:
                description:
                  type: string
                  example: Delicious food :)
                  description: Optional properties
                rating:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 5
                  example: 5
                productSlug:
                  type: string
                  example: pizza
                  maxLength: 25
                  minLength: 1
      responses:
        "200":
          description: Create review successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: "Your rating is to big. Please enter no more than 5."
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          description: Review already exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: Review already exist!
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - reviews
      security:
        - bearerAuth: []
      summary: Update review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "rating"
                - "productSlug"
              properties:
                description:
                  type: string
                  example: Not good anymore
                  description: Optional properties
                rating:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 5
                  example: 1
                productSlug:
                  type: string
                  example: pizza
                  maxLength: 25
                  minLength: 1
      responses:
        "200":
          description: Update review successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: Rating is required.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Review not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorException"
              example:
                errors: Review not found!
        "422":
          $ref: "#/components/responses/TokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/tags:
    get:
      tags:
        - "tags"
      summary: Get collections of tags
      security: []
      parameters:
        - name: category
          in: query
          description: Category slug
          allowEmptyValue: true
          required: false
          schema:
            type: string
            example: food
            maxLength: 50
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      responses:
        "200":
          description: Get collections successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/categories:
    get:
      tags:
        - "categories"
      summary: Get collections of categories
      security: []
      responses:
        "200":
          description: Get collections successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorException"
          example:
            errors: Error message.
    ProductNotFound:
      description: Product not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorException"
          example:
            errors: Product not found!
    UnauthorizedError:
      description: Access token is missing
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Unauthorized!
    TokenError:
      description: Access token error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorException"
          example:
            errors: "jwt malformed"
  schemas:
    Cart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: zylcom
        totalPrice:
          type: integer
          example: 100000
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        cartItems:
          type: array
          items:
            $ref: "#/components/schemas/Item"
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Food
        slug:
          type: string
          example: food
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        cartId:
          type: integer
          format: int32
          example: 1
        productSlug:
          type: string
          example: pizza
        quantity:
          type: integer
          format: int32
          example: 10
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
    Paging:
      type: object
      properties:
        nextCursor:
          type: integer
          format: int32
          example: 6
        totalProducts:
          type: number
          example: 30
        totalPage:
          type: number
          example: 7
        hasNextPage:
          type: boolean
          example: false
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Pizza
        slug:
          type: string
          example: pizza
        price:
          type: integer
          example: 10000
        image:
          type: string
          example: >-
            https://res.cloudinary.com/dk9bcf16t/image/upload/v1699505606/pizza_t24lbe.jpg
        averageRating:
          type: number
          example: 4.7
        description:
          type: string
          example: It's popular for all the right reasons.
        ingredients:
          type: string
          example: Wheat flour, tomato, cheese.
        categorySlug:
          type: string
          example: food
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
    Profile:
      type: object
      properties:
        name:
          type: string
          example: Zylcom
        address:
          type: string
          nullable: true
          example: null
        avatar:
          type: string
          example: "avatar-default.jpg"
    Like:
      type: object
      properties:
        id:
          type: integer
          example: 1
        productSlug:
          type: string
          example: pizza
        username:
          type: string
          example: zylcom
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        productSlug:
          type: string
          example: pizza
        username:
          type: string
          example: zylcom
        description:
          type: string
          example: Delicious food :)
        rating:
          type: integer
          format: int32
          example: 5
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Fish
        slug:
          type: string
          example: fish
        createdAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
        updatedAt:
          type: string
          example: "2023-11-10T08:09:53.865Z"
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: zylcom
        phonenumber:
          type: string
          example: "+6281234567890"
        profile:
          $ref: "#/components/schemas/Profile"
    ErrorException:
      type: object
      properties:
        errors:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
